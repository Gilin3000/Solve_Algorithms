전위 중위 후위 탐색
- 전위 : 실행 - 왼쪽 - 오른쪽 재귀
- 중위 : 왼쪽 - 실행 - 오른쪽 재귀
- 후위 : 왼쪽 - 오른쪽 - 실행 재귀


커스칼, 프림 알고리즘
스패닝 트리 -> 최소 연결 그래프, n개의 정점일시 n-1 간선
미니멈 스패닝 트리 -> 각 간선의 가중치가 다를때 가장 적은 비용

--> kurskal mst 알고리즘
-간선 e개를 퀵 정렬과 같은 효율적 알고리즘으로 정렬한다면 O(elog2e)
-그래프 내의 적은 숫자의 간선만을 가지는 희소그래프 적합
그리디 방법, 각 단계에서 사이클을 이루지않는 최소 비용 간선 선택
방법
1. 모든 정점을 독립적 집합으로 만듬
2. 간선을 가중치 별로 오름차순 정렬
3. 사이클 형성 간선은 제외하며 선택
    (두 정점의 최상위 정점 확인, 서로 다를 경우 두 정점 연결)

--> prim mst 알고리즘
-간선이 많이 존재하는 밀집그래프의 경우 적합
방법
1. (가중치, 정점)으로 데이터 구성, 시작 정점에서 출발
2. 인접 정점 간선 heappush로 추가
3. while로 돌아와서 가중치 낮은 간선 heappop
4. 정점이 실행횟수와 같을때 종료(=간선이 n-1)


DFS, BFS 알고리즘
그래프 탐색 알고리즘

--> DFS 알고리즘(깊이 우선 탐색)
-스택 자료구조 혹은 재귀 함수 이용
방법
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
2. 최상단 노드에 방문 하지않은 인접한 노드, 스택에 삽입하고 방문 처리
3. 방문하지 않은 인접한 노드 없으면 스택에서 최상단 노드 꺼냄

* 위상정렬
의존성 있는 작업이 주어질때 어떤 순서로 수행하는지 확인
그래프에 사이클이 없어야함

--> BFS 알고리즘(너비 우선 탐색)
-큐 자로구조 이용
-주로 그래프에 가중치가 없을때
방법
1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
2. 큐에서 노드를 꺼내고 인접 노드 중에 모두 큐에 삽입하고 방문 처리

* Dijkstra 
그래프의 가중치가 다르고 음수간선이 없으면 다익스트라 알고리즘
(BFS를 구현하되 우선순위큐를 사용해서 간선 가중치에 따라 우선탐색)

* 벨만-포드
음수 간선 그래프

* 플로이드
한 정점이 아닌 모든 정점 쌍의 최단거리